#!/usr/bin/python2.3

#
# Copyright 2004 OpenHosting, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# $Id: ohdisk,v 1.3 2004/09/27 14:34:13 grisha Exp $

"""
This script periodically collects data about vservers disk
utilization and stores it in a known place. The output is a
runnable shell script which should be executed upon server
bootup before any vservers are started.

"""

# XXX this should probably by in dft.py 

import commands
import os
import sys

from oh.host import vsutil, cfg

def list_vserver_xids():

    vservers = vsutil.list_vservers()

    xids = []

    for vserver in vservers:
        xid = vservers[vserver].get('S_CONTEXT', None)
        if xid:
            xids.append(xid)

    return xids

def get_disk_limits(xid, dev):

    result = {}

    cmd = '%s -x %s %s' % (os.path.join(cfg.CQ_TOOLS, 'cqdlim'), xid, dev)
    
    s =  commands.getoutput(cmd)

    lines = s.splitlines()
    for line in lines:

        key, val = line.split(':\t')

        if key == 'inodes':
            result['i_used'], result['i_total'] = val.split('/')
        elif key == 'blocks':
            blocks, percent = val.split(' ')
            result['b_used'], result['b_total'] = blocks.split('/')
            result['root'] = percent[1:-2]

    return result

# are we on vserver machine?
if not vsutil.is_vserver_kernel():
    sys.exit()

dev = vsutil.guess_vserver_device()

#servers = running_vservers()
xids = list_vserver_xids()

for xid in xids:

    dl = get_disk_limits(xid, dev)
    if dl:

        # XXX begin workaround
        # this is because of an apparent bug in the disklimits
        # code that somehow does not count inodes correctly
        if (int(dl['i_total']) - int(dl['i_used'])) < 10000:
            # less then 10000 inodes left, reset
            cmd = '%s -x %s -S %s,%s,%s,%s,%s -v %s' % \
                  (os.path.join(cfg.CQ_TOOLS, 'cqdlim'), xid, 0,
                   dl['i_total'], dl['b_used'], dl['b_total'], dl['root'],
                   dev)
            commands.getoutput(cmd)
        # end workaround

        # print out the current counters in the form of a readily
        # usable command (that is then executed on server startup)
        
        print '%s -x %s -v %s' % \
              (os.path.join(cfg.CQ_TOOLS, 'cqhadd'), xid, dev)
        print '%s -x %s -S %s,%s,%s,%s,%s -v %s' % \
              (os.path.join(cfg.CQ_TOOLS, 'cqdlim'), xid, dl['i_used'],
               dl['i_total'], dl['b_used'], dl['b_total'], dl['root'],
               dev)
    else:
        print '# no limits on xid %s' % xid



