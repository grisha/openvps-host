#
# Copyright 2004 OpenHosting, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# $Id: Makefile.in,v 1.4 2004/09/22 23:52:19 grisha Exp $

INSTALL=@INSTALL@
SBINDIR=@prefix@/sbin
MISC=@prefix@/oh/misc
BACKUP_USER=ohbackup

# XXX config, also in dft.py.in	
BACKUP_DIR="/backup"

PEERIP=@PEERIP@
DSA_KEY=@prefix@/etc/ohbackup_dsa

clean:
	rm -rf *~

distclean: clean
	rm -f Makefile

install: 
	$(INSTALL) -m 0550 ohd $(DESTDIR)$(SBINDIR)/ohd
	$(INSTALL) -m 0550 ohd_child $(DESTDIR)$(SBINDIR)/ohd_child
	$(INSTALL) -m 0550 ohdisk $(DESTDIR)$(SBINDIR)/ohdisk
	$(INSTALL) -m 0550 ohbwidth $(DESTDIR)$(SBINDIR)/ohbwidth
	$(INSTALL) -m 0550 ohbackup $(DESTDIR)$(SBINDIR)/ohbackup
	$(INSTALL) -m 0550 ohhost $(DESTDIR)$(SBINDIR)/ohhost
	$(INSTALL) -m 0550 ping $(DESTDIR)$(MISC)/ping
	$(INSTALL) -m 0550 traceroute $(DESTDIR)$(MISC)/traceroute
# 	if test -z "$(DESTDIR)"; then \
# 		$(MAKE) peer_key ; \
# 	fi

# peer_key:
# 	@if test -z "`egrep ^$(BACKUP_USER): /etc/passwd`"; then \
# 		echo "Adding user $(BACKUP_USER)..."; \
# 		adduser $(BACKUP_USER) -d $(BACKUP_DIR); \
# 		mkdir -p -m 700 $(BACKUP_DIR)/.ssh; \
# 		chown $(BACKUP_USER) $(BACKUP_DIR)/.ssh; \
# 		touch $(BACKUP_DIR)/.ssh/authorized_keys; \
# 		chown $(BACKUP_USER) $(BACKUP_DIR)/.ssh/authorized_keys; \
# 		chmod 600 $(BACKUP_DIR)/.ssh/authorized_keys; \
# 		echo "Generating a dsa key $DSA_KEY..."; \
# 		ssh-keygen -t dsa -N "" -f $(DSA_KEY); \
# 		echo ""; \
# 		echo "Now we are going to try to copy $(DSA_KEY).pub to the peer server, you will be prompted for password"; \
# 		echo "If this fails (e.g. peer server is not yet set up), then"; \
# 		echo "REMEMBER to paste the contents of $(DSA_KEY).pub into $(BACKUP_DIR)/.ssh/authorized_keys on $(PEERIP)"; \
# 		echo "  also remember to ssh to $(PEERIP) at least once to get into known_hosts."; \
# 		echo; \
# 		cat $(DSA_KEY).pub | ssh -v $(PEERIP) "cat >> $(BACKUP_DIR)/.ssh/authorized_keys; chmod 500 $(BACKUP_DIR)/.ssh/authorized_keys"; \
# 	else \
# 		echo "User $(BACKUP_USER) exists, not adding."; \
# 	fi
